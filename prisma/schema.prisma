// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime?
  updatedAt     DateTime?
  Session       Session[]
  Account       Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  firstName String?
  lastName  String?
  phone     String?

  reports      Report[]
  repoContexts RepoContext[]

  @@unique([email])
  @@map("user")
}

model RepoTree {
  id        String   @id @default(cuid())
  repoUrl   String   @unique
  treeData  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id              String       @id @default(cuid())
  repoUrl         String
  userId          String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  User            User         @relation(fields: [userId], references: [id])
  // Optional relation to RepoContext
  repoContextId   String?
  repoContext     RepoContext? @relation(fields: [repoContextId], references: [id])
  repoDescription String       @default("")

  // New fields for report generation state
  modelResponse String? // Stores the language model's output when ready.
  status        String  @default("pending") // e.g., "pending", "complete", or "failed"
}

model RepoContext {
  id        String   @id @default(cuid())
  repoUrl   String
  // The output from repomix (e.g. XML, Markdown, or plain text)
  context   String
  // Optional relation to a user.
  userId    String?
  createdAt DateTime @default(now())

  User   User?    @relation(fields: [userId], references: [id])
  Report Report[]
}

// Better-Auth

model Session {
  id        String    @id
  expiresAt DateTime
  token     String
  createdAt DateTime?
  updatedAt DateTime?
  ipAddress String?
  userAgent String?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime?
  updatedAt             DateTime?

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
